name: Rust

on:
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

    - uses: crazy-max/ghaction-dump-context@v1

    - uses: actions/checkout@v3
      with:
        repository: eranrund/gha-test-app
        submodules: 'recursive'

    - name: Cache state
      id: cache-state
      uses: actions/cache@v3
      with:
        path: /home/runner/.state
        key: ${{ runner.os }}-XXX2-${{ hashFiles('janky-state/*') }}
        restore-keys: |
          ${{ runner.os }}-XXX2-

    - name: Build with current branch
      run: |
        STATE_DIR=$GITHUB_WORKSPACE/janky-state
        mkdir -p $STATE_DIR
        CUR_BRANCH=${GITHUB_REF//\//_}
        STATE_FILE="$STATE_DIR/$CUR_BRANCH-failed"

        cd gha-test-lib
        #git remote set-url origin ${{ github.repositoryUrl }} - this is git:// and GHA doesn't seem to like it
        git remote set-url origin https://github.com/${{ github.repository }}
        git fetch origin ${{ github.ref }}:gha-test
        git checkout gha-test
        cd ..

        cargo build --verbose && {
          if [ -f "$STATE_FILE" ]; then
            echo "We previously failed building, but now we succeeded."
            rm $STATE_FILE
            echo "UPREV_FIXED=1" >> "$GITHUB_ENV"
          fi
         } || {
          # We failed building, so first keep track of that in the env so that the next steps
          # can access this information.
          echo "UPREV_FAILED=1" >> "$GITHUB_ENV"

          # If this a new failure?
          if [ -f "$STATE_FILE" ]; then
            echo "Not the first time this branch failed, so we won't be posting an update on that."
            echo "NEW_FAILURE=0" >> "$GITHUB_ENV"
          else
            echo "Detected a new failure, indicating by writing to $STATE_FILE"
            echo > $STATE_FILE
            echo "NEW_FAILURE=1" >> "$GITHUB_ENV"
          fi
        }

    - name: Build with base branch (${{ github.base_ref }})
      if: env.UPREV_FAILED == '1' && env.NEW_FAILURE == '1'
      run: |
        cd gha-test-lib
        #git remote set-url origin ${{ github.repositoryUrl }} - this is git:// and GHA doesn't seem to like it
        git remote set-url origin https://github.com/${{ github.repository }}
        git fetch origin ${{ github.base_ref }}:gha-test-base
        git checkout gha-test-base
        cd ..

        cargo build --verbose && echo "BASE_FAILED=0" >> "$GITHUB_ENV" || echo "BASE_FAILED=1" >> "$GITHUB_ENV"



    - name: Comment on PR (failure)
      uses: mshick/add-pr-comment@v1
      if: env.UPREV_FAILED == '1' && env.BASE_FAILED == '0' && env.NEW_FAILURE == '1'
      with:
        message: |
          Heads up, I tried building XXX using this branch and it failed.
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
        allow-repeats: true # This is the default

    - name: Comment on PR (success)
      uses: mshick/add-pr-comment@v1
      if: env.UPREV_FIXED == '1'
      with:
        message: |
          âœ… Good job, XXX was built successfully.
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
        allow-repeats: true # This is the default
